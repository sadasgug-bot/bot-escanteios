import logging
import sqlite3
import asyncio
from datetime import datetime
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes

# Configuração
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

TOKEN = "8443274539:AAEZ_jfLKLAHjTquzS9Z650Xn4_-ZwTlrnI"

# Banco de dados em memória (para Render)
usuarios = set()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    usuarios.add(user_id)
    
    await update.message.reply_text(
        "🤖 *BOT 100% ONLINE - RENDER.COM* 🚀\n\n"
        "✅ **Sistema 24/7 Ativado**\n"
        "🔔 **Alertas Automáticos:** A cada 30min\n"
        "🎯 **Estratégia:** Odd 1.25 + Time pressionando\n\n"
        "⚡ **Status:** Online sem computador\n"
        "📱 **Sempre disponível no celular**\n\n"
        "Aguarde os primeiros alertas!",
        parse_mode='Markdown'
    )

async def teste(update: Update, context: ContextTypes.DEFAULT_TYPE):
    alerta = f"""
🚨 *ALERTA AUTOMÁTICO - {datetime.now().strftime("%H:%M")}* ⚽

🏆 **Premier League - ONLINE**
⚽ **Arsenal 0×1 Chelsea**
⏰ **Minuto:** 42'
💰 **Odd Betano:** 1.28 ✅
🎯 **Aposta:** +3.5 escanteios

✅ **Render.com:** 100% Online
✅ **24/7:** Sem computador ligado
✅ **Automático:** Alertas a cada 30min

🔔 *Próximo alerta real em breve!*
"""
    await update.message.reply_text(alerta, parse_mode='Markdown')

async def alertas_automaticos(context: ContextTypes.DEFAULT_TYPE):
    try:
        logger.info("🔍 Procurando oportunidades...")
        
        # Simular alerta real
        alerta = f"""
🚨 *ALERTA ENCONTRADO!* ⚽

🏆 **La Liga - {datetime.now().strftime("%d/%m %H:%M")}**
⚽ **Barcelona 1×1 Real Madrid**
⏰ **Minuto:** 72'
💰 **Odd:** 1.31 ✅
🎯 **+9.5 escanteios**

✅ Time empatando pressionando
✅ 8 escanteios totais
✅ Odd acima de 1.25

⚡ **Oportunidade válida por 15min**
"""
        
        # Enviar para todos usuários
        for user_id in list(usuarios):
            try:
                await context.bot.send_message(
                    chat_id=user_id,
                    text=alerta,
                    parse_mode='Markdown'
                )
                logger.info(f"✅ Alerta enviado para {user_id}")
            except Exception as e:
                logger.error(f"❌ Erro: {e}")
                
    except Exception as e:
        logger.error(f"❌ Erro nos alertas: {e}")

def main():
    application = Application.builder().token(TOKEN).build()
    
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("teste", teste))
    
    # Alertas a cada 30 minutos
    job_queue = application.job_queue
    job_queue.run_repeating(alertas_automaticos, interval=1800, first=10)
    
    logger.info("🚀 BOT 100% ONLINE INICIADO NO RENDER!")
    print("=" * 50)
    print("✅ SISTEMA 24/7 CONFIGURADO!")
    print("📍 Render.com: Online permanente")
    print("🔔 Alertas: A cada 30 minutos")
    print("📱 Telegram: @TirodeesquinaBot")
    print("=" * 50)
    
    application.run_polling()

if __name__ == '__main__':
    main()